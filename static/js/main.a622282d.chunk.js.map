{"version":3,"sources":["context/sets/setTypes.tsx","context/sets/setReducer.tsx","context/sets/SetContext.tsx","context/exercises/exerciseTypes.tsx","components/ExerciseSet/ExerciseSet.tsx","components/ExerciseSets/ExerciseSets.tsx","components/ExerciseSets/ExerciseSetsWithStore.tsx","context/exercises/exerciseReducer.tsx","context/exercises/ExerciseContext.tsx","components/ExerciseForm/ExerciseForm.tsx","components/ExerciseForms/ExerciseForms.tsx","components/ExerciseForms/ExerciseFormsWithStore.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionKind","setReducer","state","action","type","ADD_SET","newSet","Error","REMOVE_SET","partialSet","index","filter","set","UPDATE_SET","reps","weight","undefined","checkSet","map","oldSet","createdSet","updatedSet","initialStateForNewSets","uuidv4","initialState","SetContext","React","createContext","dispatch","useSets","setContext","context","useContext","SetProvider","children","useReducer","Provider","value","ExerciseActionKind","isRealNumber","input","RegExp","test","ExerciseSet","weightSetting","initialWeight","initialReps","useState","setWeight","setReps","data-testid","TextField","label","id","InputProps","endAdornment","InputAdornment","position","aria-label","variant","onChange","e","target","IconButton","onClick","titleAccess","ExerciseSets","length","ExerciseSetsWithStore","exerciseReducer","ADD_EXERCISE","newExercise","REMOVE_EXERCISE","partialExercise","exercise","UPDATE_EXERCISE","name","checkExercise","oldExercise","createdExercise","updatedExercise","initialStateForNewExercises","ExerciseContext","useExercises","exerciseContext","ExerciseProvider","exercises","bodyparts","filterOptions","createFilterOptions","limit","fuse","Fuse","keys","ExerciseForm","initialName","setExercise","FormControl","component","Autocomplete","autoSelect","onInputChange","inputValue","options","getOptionLabel","option","search","res","item","renderInput","params","ExerciseForms","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a622282d.chunk.js","sourcesContent":["interface exerciseSet extends partialSet {\r\n    readonly index: string | number;\r\n    weight: number | '';\r\n    reps: number | '';\r\n};\r\n\r\ninterface partialSet {\r\n    readonly index: string | number;\r\n    weight?: number | '';\r\n    reps?: number | '';\r\n}\r\n\r\nenum ActionKind {\r\n    ADD_SET = 'ADD_SET',\r\n    REMOVE_SET = 'REMOVE_SET',\r\n    UPDATE_SET = 'UPDATE_SET'\r\n}\r\n\r\ninterface setAction {\r\n    type: ActionKind;\r\n    // set is used for adding a set\r\n    newSet?: exerciseSet;\r\n    // partialSet is used for removing a set\r\n    // partialSet is used for updating a set\r\n    partialSet?: partialSet;\r\n}\r\n\r\ntype setStateDispatch = {\r\n    state: exerciseSet[],\r\n    dispatch: React.Dispatch<setAction>\r\n}\r\n\r\nexport type { exerciseSet, partialSet, setAction, setStateDispatch };\r\nexport { ActionKind };","import {exerciseSet, ActionKind, setAction, partialSet} from './setTypes';\r\n\r\nconst checkSet = (set: partialSet) => {\r\n    if (set.reps && set.reps < 0) throw new Error(`Reps must be 0 or greater`);\r\n    if (set.weight && set.weight < 0) throw new Error(`Weight must be 0 or greater`);\r\n    if ((set.reps === undefined) && (set.weight === undefined)) throw new Error('Provide reps or weight')\r\n}\r\n\r\nfunction updatedSet(oldSet: exerciseSet, newSet: partialSet): exerciseSet {\r\n    const createdSet: exerciseSet = {...oldSet, ...newSet};\r\n    if (newSet.weight === undefined) createdSet.weight = oldSet.weight;\r\n    if (newSet.reps === undefined) createdSet.reps = oldSet.reps;\r\n    return createdSet;\r\n}\r\n\r\nfunction setReducer(state: exerciseSet[], action: setAction): exerciseSet[] {\r\n    switch(action.type) {\r\n        case ActionKind.ADD_SET: {\r\n            if (!action.newSet) throw new Error(`Provide the set to be added`);\r\n            return [ ...state, action.newSet! ];\r\n        }\r\n        case ActionKind.REMOVE_SET: {\r\n            if (!action.partialSet) throw new Error(`Provide the set to be removed`);\r\n            const set: partialSet = action.partialSet\r\n            const {index} = set;\r\n            return state.filter(set => set.index !== index);\r\n        }\r\n        case ActionKind.UPDATE_SET: {\r\n            if (!action.partialSet) throw new Error(`Provide the set to be updated`);\r\n            const partialSet: partialSet = action.partialSet\r\n            checkSet(partialSet);\r\n            return state.map(set => {\r\n                if (set.index === partialSet.index) return updatedSet(set, partialSet)\r\n                return set;\r\n            });\r\n        }\r\n        default: \r\n            throw new Error(`Unsupported action type: ${action.type}`)\r\n    }\r\n}\r\n\r\nexport { setReducer };","import React from 'react';\r\nimport {exerciseSet, setStateDispatch} from './setTypes';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {setReducer} from './setReducer';\r\n\r\nconst initialStateForNewSets: () => exerciseSet = ((): exerciseSet => ({\r\n    weight: '',\r\n    reps: '',\r\n    index: uuidv4()\r\n}));\r\nconst initialState: exerciseSet[] = [initialStateForNewSets()];\r\nconst initialDispatch: React.Dispatch<any> = () => null;\r\n\r\nconst SetContext = React.createContext<setStateDispatch>({\r\n    state: initialState,\r\n    dispatch: initialDispatch\r\n  });\r\n\r\nfunction useSets(setContext: React.Context<setStateDispatch> = SetContext): setStateDispatch {\r\n    const context = React.useContext<setStateDispatch>(setContext); \r\n    return context;\r\n}\r\n\r\ninterface providerProps {\r\n    children: React.ReactElement\r\n}\r\n\r\nfunction SetProvider({children}: providerProps) {\r\n    const [state, dispatch] = React.useReducer(setReducer, initialState);\r\n    \r\n    return (\r\n        <SetContext.Provider value={{state, dispatch}}>\r\n            {children}\r\n        </SetContext.Provider>\r\n    )\r\n}\r\n\r\nexport {useSets, SetProvider, SetContext, initialStateForNewSets};","enum ExerciseActionKind {\r\n    ADD_EXERCISE = 'ADD_EXERCISE',\r\n    REMOVE_EXERCISE = 'REMOVE_EXERCISE',\r\n    UPDATE_EXERCISE = 'UPDATE_EXERCISE'\r\n}\r\n\r\ninterface exercise extends partialExercise {\r\n    readonly index: number | string;\r\n    name: string;\r\n}\r\n\r\ninterface partialExercise {\r\n    readonly index: number | string;\r\n    name?: string;\r\n}\r\n\r\ninterface exerciseAction {\r\n    type: ExerciseActionKind;\r\n    newExercise?: exercise;   \r\n    partialExercise?: partialExercise;\r\n}\r\n\r\ntype exerciseStateDispatch = {\r\n    state: exercise[],\r\n    dispatch: React.Dispatch<exerciseAction>\r\n}\r\n\r\nexport type { exercise, partialExercise, exerciseAction, exerciseStateDispatch };\r\nexport { ExerciseActionKind };","import React from 'react';\r\nimport { TextField, InputAdornment, IconButton } from '@material-ui/core'\r\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\r\nimport { useSets } from '../../context/sets/SetContext';\r\nimport { ActionKind } from '../../context/sets/setTypes';\r\n\r\ninterface exerciseSetProps {\r\n  weightSetting?: 'lbs' | 'kgs';\r\n  initialWeight?: string | number;\r\n  initialReps?: string | number;\r\n  index: string | number;\r\n}\r\n\r\nconst isRealNumber = (input: string) => {\r\n  const regex = new RegExp(\"^[0-9]*[.]?[0-9]*$\");\r\n  return regex.test(input)\r\n}\r\n\r\nconst ExerciseSet = ({weightSetting='lbs', initialWeight='', initialReps='', index}: exerciseSetProps) => {\r\n  const [weight, setWeight] = React.useState<string | number>(initialWeight);\r\n  const [reps, setReps] = React.useState<string | number>(initialReps);\r\n  const {dispatch} = useSets();\r\n\r\n  return (\r\n  <div data-testid=\"set\">\r\n      <TextField\r\n        label=\"Weight\"\r\n        id=\"outlined-start-adornment\"\r\n        // className={clsx(classes.margin, classes.textField)}\r\n        InputProps={{\r\n          endAdornment: <InputAdornment position=\"end\" aria-label='metric system'>{weightSetting}</InputAdornment>,\r\n        }}\r\n        type=\"text\"\r\n        variant=\"outlined\"\r\n        value={weight}\r\n        onChange={(e) => isRealNumber(e.target.value) ? setWeight(e.target.value) : ''}\r\n      />\r\n\r\n      <TextField \r\n        label=\"Reps\" \r\n        id=\"outlined-search\" \r\n        type=\"text\" \r\n        variant=\"outlined\"\r\n        value={reps}\r\n        onChange={(e) => isRealNumber(e.target.value) ? setReps(e.target.value) : ''} \r\n      />\r\n      \r\n      <IconButton \r\n        aria-label=\"Remove Set\"\r\n        onClick={() => dispatch({ type: ActionKind.REMOVE_SET, partialSet: {index} })}\r\n      >\r\n        <RemoveCircleIcon titleAccess=\"Remove Set\"></RemoveCircleIcon>\r\n      </IconButton>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default ExerciseSet;\r\nexport type { exerciseSetProps }","import { IconButton } from '@material-ui/core'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { useSets, initialStateForNewSets } from '../../context/sets/SetContext';\r\nimport ExerciseSet from '../ExerciseSet/ExerciseSet';\r\nimport { ActionKind } from '../../context/sets/setTypes';\r\n\r\nconst ExerciseSets = () => {\r\n   const {state, dispatch} = useSets();\r\n\r\n    return (\r\n        <>\r\n            {state.length ? (\r\n                <div data-testid=\"sets\">\r\n                    {state.map(({index, reps, weight}) => <ExerciseSet initialReps={reps} initialWeight={weight} key={index} index={index} />)}\r\n                </div>\r\n            ) : <></>}\r\n            <IconButton\r\n                aria-label=\"Add Set\" \r\n                onClick={() => dispatch({type: ActionKind.ADD_SET, newSet: initialStateForNewSets()})}\r\n            >\r\n                <AddCircleIcon titleAccess=\"Add Set\"/>\r\n            </IconButton>\r\n        </>\r\n   );\r\n};\r\n\r\nexport default ExerciseSets;","// import ExerciseSet from '../components/ExerciseSet/ExerciseSet';\r\nimport ExerciseSets from './ExerciseSets';\r\nimport { SetProvider } from '../../context/sets/SetContext';\r\n\r\nconst ExerciseSetsWithStore = () => (\r\n    <SetProvider>\r\n        <ExerciseSets />\r\n    </SetProvider>\r\n);\r\n\r\nexport default ExerciseSetsWithStore;","import { exercise, partialExercise, exerciseAction, ExerciseActionKind } from './exerciseTypes';\r\n\r\nconst checkExercise = (exercise: partialExercise) => {\r\n    if (exercise.name === undefined) throw new Error(`Provide an exercise name`);\r\n}\r\n\r\nfunction updatedExercise(oldExercise: exercise, newExercise: partialExercise): exercise {\r\n    const createdExercise: exercise = {...oldExercise, ...newExercise};\r\n    if (newExercise.name === undefined) createdExercise.name = oldExercise.name;\r\n    return createdExercise;\r\n}\r\n\r\nfunction exerciseReducer(state: exercise[], action: exerciseAction): exercise[] {\r\n    switch(action.type) {\r\n        case ExerciseActionKind.ADD_EXERCISE: {\r\n            if (!action.newExercise) throw new Error(`Provide the exercise to be added`);\r\n            return [ ...state, action.newExercise ];\r\n        }\r\n        case ExerciseActionKind.REMOVE_EXERCISE: {\r\n            if (!action.partialExercise) throw new Error(`Provide the exercise to be removed`);\r\n            const exercise: partialExercise = action.partialExercise;\r\n            const {index} = exercise;\r\n            return state.filter(exercise => exercise.index !== index);\r\n        }\r\n        case ExerciseActionKind.UPDATE_EXERCISE: {\r\n            if (!action.partialExercise) throw new Error(`Provide the exercise to be updated`);\r\n            const partialExercise: partialExercise = action.partialExercise;\r\n            // if (name === undefined) return state;\r\n            checkExercise(partialExercise);\r\n            return state.map(exercise => {\r\n                if (exercise.index === partialExercise.index) return updatedExercise(exercise, partialExercise)\r\n                return exercise;\r\n            });\r\n        }\r\n        default: \r\n            throw new Error(`Unsupported action type: ${action.type}`)\r\n    }\r\n}\r\n\r\nexport { exerciseReducer };","import React from 'react';\r\nimport {exercise, exerciseStateDispatch} from './exerciseTypes';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { exerciseReducer } from './exerciseReducer';\r\n\r\nconst initialStateForNewExercises: () => exercise = ((): exercise => ({\r\n    name: '',\r\n    index: uuidv4()\r\n}));\r\nconst initialState: exercise[] = [initialStateForNewExercises()];\r\nconst initialDispatch: React.Dispatch<any> = () => null;\r\n\r\nconst ExerciseContext = React.createContext<exerciseStateDispatch>({\r\n    state: initialState,\r\n    dispatch: initialDispatch\r\n  });\r\n\r\nfunction useExercises(exerciseContext: React.Context<exerciseStateDispatch> = ExerciseContext): exerciseStateDispatch {\r\n    const context = React.useContext<exerciseStateDispatch>(exerciseContext); \r\n    return context;\r\n}\r\n\r\ninterface providerProps {\r\n    children: React.ReactElement\r\n}\r\n\r\nfunction ExerciseProvider({children}: providerProps) {\r\n    const [state, dispatch] = React.useReducer(exerciseReducer, initialState);\r\n    \r\n    return (\r\n        <ExerciseContext.Provider value={{state, dispatch}}>\r\n            {children}\r\n        </ExerciseContext.Provider>\r\n    )\r\n}\r\n\r\nexport {useExercises, ExerciseProvider, ExerciseContext, initialStateForNewExercises};","// import clsx from 'clsx';\r\nimport React from 'react';\r\nimport { TextField, FormControl, IconButton } from '@material-ui/core';\r\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\r\nimport Autocomplete, { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\r\nimport Fuse from 'fuse.js';\r\nimport ExerciseSetsWithStore from '../ExerciseSets/ExerciseSetsWithStore';\r\nimport { useExercises } from '../../context/exercises/ExerciseContext';\r\nimport { ExerciseActionKind } from '../../context/exercises/exerciseTypes';\r\nimport { FilterOptionsState } from '@material-ui/lab/useAutocomplete';\r\n\r\ntype bodypart = 'chest' | 'lats' | 'shoulders' | 'traps' | 'biceps' | 'triceps' | 'forearms' | 'abdominals' | 'quadriceps' | 'hamstrings' | 'glutes' | 'calves';\r\n\r\ninterface exercise {\r\n  index: number | string;\r\n  name: string;\r\n  bodyparts: bodypart[];\r\n}\r\n\r\nconst exercises: exercise[] = [{\r\n  index: 0,\r\n  name: 'squat',\r\n  bodyparts: ['quadriceps', 'glutes']\r\n}, {\r\n  index: 1,\r\n  name: 'deadlift',\r\n  bodyparts: ['hamstrings', 'glutes', 'lats', 'traps', 'forearms']\r\n}, {\r\n  index: 2,\r\n  name: 'bench',\r\n  bodyparts: ['chest', 'triceps']\r\n}]\r\n\r\ninterface exerciseFromProps {\r\n  initialName?: string;\r\n  index: string | number;\r\n}\r\n\r\nconst isOnlyAlphabetic = (input: string) => {\r\n  const regex = new RegExp(\"^[a-z]*$\", 'i');\r\n  return regex.test(input)\r\n}\r\n\r\nconst filterOptions = createFilterOptions<exercise>({ limit: 6 });\r\n\r\nconst fuse = new Fuse<exercise>(exercises, {keys: ['name']});\r\n\r\nconst ExerciseForm = ({index, initialName=''}: exerciseFromProps) => {\r\n    const [exercise, setExercise] = React.useState<string>(initialName);\r\n    const { dispatch } = useExercises();\r\n\r\n    return (\r\n    <div>\r\n      <FormControl component=\"fieldset\">\r\n          <Autocomplete\r\n            autoSelect={true}\r\n            onInputChange={(e, value) => isOnlyAlphabetic(value) ? setExercise(value) : ''}\r\n            inputValue={exercise}\r\n            options={exercises}\r\n            // TODO: Implement groups: muscle groups and popluar\r\n            // renderGroup={}\r\n            // TODO: When no exercise found, display link allowing user to request exercise addition\r\n            getOptionLabel={(option: exercise) => option.name}\r\n            filterOptions={(options: exercise[], state: FilterOptionsState<exercise>): exercise[] =>\r\n              state.inputValue ? fuse.search(state.inputValue).map(res => res.item) : filterOptions(options, state)\r\n            }\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                // id=\"outlined-search\" \r\n                label=\"Exercise\" \r\n                type=\"search\" \r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          />\r\n          <ExerciseSetsWithStore />\r\n      </FormControl>\r\n      <IconButton \r\n        aria-label=\"Remove Exercise\"\r\n        onClick={() => dispatch({ type: ExerciseActionKind.REMOVE_EXERCISE, partialExercise: {index} })}\r\n      >\r\n        <RemoveCircleIcon titleAccess=\"Remove Exercise\"></RemoveCircleIcon>\r\n      </IconButton>\r\n    </div>\r\n    )\r\n  };\r\n\r\nexport default ExerciseForm;","import { IconButton } from '@material-ui/core'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport ExerciseForm from '../ExerciseForm/ExerciseForm';\r\nimport { useExercises, initialStateForNewExercises } from '../../context/exercises/ExerciseContext';\r\nimport { ExerciseActionKind} from '../../context/exercises/exerciseTypes';\r\n\r\nconst ExerciseForms = () => {\r\n    const {state, dispatch} = useExercises();\r\n\r\n    return (\r\n        <>\r\n            {state.length ? (\r\n                <div data-testid=\"exercises\">\r\n                    {state.map(({index, name}) => <ExerciseForm initialName={name} key={index} index={index} />)}\r\n                </div>\r\n            ) : <></>}\r\n            <IconButton\r\n                aria-label=\"Add Exercise\" \r\n                onClick={() => dispatch({type: ExerciseActionKind.ADD_EXERCISE, newExercise: initialStateForNewExercises()})}\r\n            >\r\n                <AddCircleIcon titleAccess=\"Add Exercise\"/>\r\n            </IconButton>\r\n        </>\r\n   );\r\n}\r\n\r\nexport default ExerciseForms;","// import ExerciseSet from '../components/ExerciseSet/ExerciseSet';\r\nimport ExerciseForms from './ExerciseForms';\r\nimport { ExerciseProvider } from '../../context/exercises/ExerciseContext';\r\n\r\nconst ExerciseSetsWithStore = () => (\r\n    <ExerciseProvider>\r\n        <ExerciseForms />\r\n    </ExerciseProvider>\r\n);\r\n\r\nexport default ExerciseSetsWithStore;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ExerciseFromsWithStore from './components/ExerciseForms/ExerciseFormsWithStore';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <ExerciseFromsWithStore />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}